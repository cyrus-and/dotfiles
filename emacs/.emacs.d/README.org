* Cheatsheet

Common native key bindings:

| ~% m~       | ~dired-mark-files-regexp~                            |
| ~C-s C-w~   | ~isearch-yank-word-or-char~                          |
| ~C-u C-SPC~ | ~pop-mark~                                           |
| ~C-x -~     | ~shrink-window-if-larger-than-buffer~                |
| ~C-x 8 RET~ | ~insert-char~                                        |
| ~C-x C-;~   | ~comment-line~                                       |
| ~C-x C-SPC~ | ~pop-global-mark~                                    |
| ~C-x C-b~   | ~list-buffers~                                       |
| ~C-x C-q~   | ~wdired-change-to-wdired-mode~                       |
| ~C-x M-:~   | ~repeat-complex-command~                             |
| ~C-x SPC~   | ~rectangle-mark-mode~                                |
| ~C-x TAB~   | ~indent-rigidly~                                     |
| ~C-x d~     | ~dired~ (useful for applying filters, e.g., ~*.org~) |
| ~C-x n n~   | ~narrow-to-region~                                   |
| ~C-x n w~   | ~widen~                                              |
| ~C-x r SPC~ | ~point-to-register~                                  |
| ~C-x r i~   | ~insert-register~                                    |
| ~C-x r s~   | ~copy-to-register~                                   |
| ~C-x r w~   | ~window-configuration-to-register~                   |
| ~C-x w r~   | ~unhighlight-regexp~                                 |
| ~C-x z~     | ~repeat~                                             |
| ~M-/~       | ~dabbrev-expand~                                     |
| ~M-?~       | ~xref-find-references~                               |
| ~M-^~       | ~delete-indentation~                                 |
| ~M-h~       | ~mark-paragraph~                                     |
| ~M-g M-n~   | ~next-error~                                         |
| ~M-g M-p~   | ~previous-error~                                     |
| ~M-s h .~   | ~highlight-symbol-at-point~                          |
| ~M-s h r~   | ~highlight-regexp~                                   |
| ~M-s o~     | ~occur~ (specify the context with ~C-u~)             |
| ~M-z~       | ~zap-to-char~                                        |
| ~M-¦~       | ~shell-command-on-region~ (replace with ~C-u~)       |

Custom key bindings can be listed with ~C-c ?~.

* Packages

Initialize the package system:

#+BEGIN_SRC emacs-lisp
(package-initialize)
#+END_SRC

Add additional repositories:

#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives
             '("melpa" . "https://melpa.org/packages/"))
#+END_SRC

Install packages:

#+BEGIN_SRC emacs-lisp
(let ((packages
       '(auctex
         avy
         cmake-ide
         cmake-mode
         edit-indirect
         exec-path-from-shell
         go-mode
         htmlize
         js2-mode
         json-mode
         magit
         markdown-mode
         password-store
         php-mode
         rainbow-mode
         rtags
         web-mode
         window-numbering
         yaml-mode)))
  (when (member nil (mapcar 'package-installed-p packages))
    (package-refresh-contents)
    (mapc 'package-install packages)))
#+END_SRC

Add convenience shortcut:

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c p") 'package-list-packages)
#+END_SRC

* Theme

Use a personal custom theme (find it [[file:my-theme.el][here]]):

#+BEGIN_SRC emacs-lisp
(load-theme 'my t)
#+END_SRC

* Base setup

** Backups

Put all the backups in a single place without touching the original file:

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(backup-by-copying t)
 '(backup-directory-alist '(("." . "~/.emacs.d/backups"))))
#+END_SRC

** Code indenting and formatting

Never use tabs and fix the default C indentation:

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(require-final-newline 'ask)
 '(fill-column 80)
 '(c-backslash-column 79)
 '(c-backslash-max-column 79)
 '(indent-tabs-mode nil)
 '(c-basic-offset 4)
 '(c-offsets-alist
   '((substatement-open . 0)
     (brace-list-intro . +)
     (arglist-intro . +)
     (arglist-close . 0)
     (cpp-macro . 0)
     (innamespace . 0))))
#+END_SRC

** Keywords highlighting

Useful keyword highlighting:

#+BEGIN_SRC emacs-lisp
(defun my/keywords-highlighting ()
  (let* ((regexp "\\<TODO\\>\\|\\<XXX\\>")
         (match `((,regexp 0 font-lock-warning-face t))))
    (font-lock-add-keywords nil match t)))

(add-hook 'text-mode-hook 'my/keywords-highlighting)
(add-hook 'prog-mode-hook 'my/keywords-highlighting)
#+END_SRC

** Minibuffer history

Infinite minibuffer history:

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(savehist-mode t)
 '(history-length t))
#+END_SRC

** Mouse behavior

More comfortable mouse scrolling and yanking:

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(mouse-wheel-scroll-amount '(1 ((shift) . 5)))
 '(mouse-wheel-progressive-speed nil)
 '(mouse-yank-at-point t))
#+END_SRC

Allow to yank the primary selection with the keyboard:

#+BEGIN_SRC emacs-lisp
(defun my/yank-primary ()
  "Yank the primary selection (the one selected with the mouse)."
  (interactive)
  (insert-for-yank (gui-get-primary-selection)))
#+END_SRC

Replace the original shortcut:

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "S-<insert>") 'my/yank-primary)
#+END_SRC

** Performance

Call the garbage collector less often:

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(gc-cons-threshold (* 32 (expt 2 20)))) ; 32 MB
#+END_SRC

** Scrolling

Scroll without jumps if the cursor moves out the window boundaries:

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(scroll-step 1)
 '(scroll-margin 0)
 '(hscroll-step 1)
 '(hscroll-margin 0))
#+END_SRC

*Note:* setting ~scroll-conservatively~ to a large number yileds the same result but it also affects the point position after a /jump/, e.g., ~next-error~, ~iserach-forward~, etc.

** User interface settings

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(blink-cursor-mode nil)
 '(column-number-mode t)
 '(disabled-command-function nil)
 '(electric-pair-mode t)
 '(font-lock-maximum-decoration 2)
 '(help-window-select t)
 '(indicate-buffer-boundaries 'left)
 '(indicate-empty-lines t)
 '(inhibit-startup-screen t)
 '(initial-scratch-message "")
 '(menu-bar-mode nil)
 '(ring-bell-function 'ignore)
 '(scroll-bar-mode nil)
 '(show-paren-mode t)
 '(tab-width 4)
 '(tool-bar-mode nil)
 '(truncate-lines t)
 '(use-dialog-box nil))
#+END_SRC

* Components

** auto-insert skeletons

Create skeletons and silently auto-instert them in new files:

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(auto-insert-mode t)
 '(auto-insert-query nil)
 '(auto-insert-alist '(("\\.c\\'" . my/c-source-skeleton)
                       ("\\.cpp\\'" . my/c++-source-skeleton)
                       ("\\.html\\'" . my/html-skeleton))))

(define-skeleton my/c-source-skeleton
  "C source skeleton"
  nil
  "/* -*- compile-command: \"gcc -Wall -pedantic -g3 "
  (buffer-name) " -o " (file-name-base) "\" -*- */\n"
  "#include <stdio.h>\n"
  "#include <stdlib.h>\n"
  "\n"
  "int main(int argc, char *argv[]) {\n"
  "    " _ "printf(\"Hello, world\\n\");\n"
  "    return EXIT_SUCCESS;\n"
  "}\n")

(define-skeleton my/c++-source-skeleton
  "C++ source skeleton"
  nil
  "// -*- compile-command: \"g++ -Wall -pedantic -g3 "
  (buffer-name) " -o " (file-name-base) "\" -*-\n"
  "#include <iostream>\n"
  "\n"
  "int main(int argc, char *argv[]) {\n"
  "    " _ "std::cout << \"Hello, world\" << std::endl;\n"
  "}\n")

(define-skeleton my/html-skeleton
  "HTML skeleton"
  nil
  "<!DOCTYPE html>\n"
  "<html lang=\"en\">\n"
  "    <head>\n"
  "        <meta charset=\"utf-8\">\n"
  "        <title></title>\n"
  "        <style></style>\n"
  "        <script></script>\n"
  "    </head>\n"
  "    <body>\n"
  "        " _ "Hello, world\n"
  "    </body>\n"
  "</html>\n")
#+END_SRC

** avy

Override ~goto-line~:

#+BEGIN_SRC emacs-lisp
(defalias 'goto-line 'avy-goto-line)
#+END_SRC

Main goto-char shortcut:

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-ò") 'avy-goto-char-timer)
#+END_SRC

** Compilation

Make the compiling interaction less painful:

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(compile-command "make")
 '(compilation-scroll-output 'first-error)
 '(compilation-always-kill t)
 '(compilation-disable-input t))
#+END_SRC

Ensure that the compilation messages are nicely readable:

#+BEGIN_SRC emacs-lisp
(add-hook 'compilation-mode-hook 'visual-line-mode)
#+END_SRC

Automatically kill the compilation window on success after a short delay, but only if successful:

#+BEGIN_SRC emacs-lisp
(defun my/compile-auto-quit (buffer status)
  (let ((window (get-buffer-window buffer)))
    (when (and my/compile-should-auto-quit
               window (equal status "finished\n"))
      (run-at-time 1 nil 'quit-window nil window))))

(add-to-list 'compilation-finish-functions 'my/compile-auto-quit)
#+END_SRC

Inhibit the behavior if the compilation window is already present when the re/compilation is started:

#+BEGIN_SRC emacs-lisp
(defun my/compile-before (&rest ignore)
  (let* ((buffer (get-buffer "*compilation*"))
         (window (get-buffer-window buffer)))
    (setq my/compile-should-auto-quit (not (and buffer window)))))

(advice-add 'compile :before 'my/compile-before)
(advice-add 'recompile :before 'my/compile-before)
#+END_SRC

Add a recompilation helper:

#+BEGIN_SRC emacs-lisp
(defun my/smart-compile ()
  "Recompile or prompt a new compilation."
  (interactive)
  (if (local-variable-p 'compile-command)
      (compile compile-command)
    (let ((buffer (get-buffer "*compilation*")))
      (if buffer
          (with-current-buffer buffer
            (recompile))
        (call-interactively 'compile)))))
#+END_SRC

*Note:* a mere ~recompile~ will not work because it would use the ~compilation-command~ of the current buffer.

Add convenience shortcuts:

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c c") 'my/smart-compile)
(global-set-key (kbd "C-c C") 'compile)
#+END_SRC

** C/C++ IDE

This requires the [[https://github.com/Andersbakken/rtags][rtags]] external dependency and works out-of-the-box with CMake projects.

#+BEGIN_SRC emacs-lisp
(require 'rtags)
(cmake-ide-setup)
#+END_SRC

It should be enough to just navigate a project to take advantage of ~rtags~. The following enables the standard ~rtags~ convenience shortcuts (prefix ~C-c r~):

#+BEGIN_SRC emacs-lisp
(rtags-enable-standard-keybindings)
#+END_SRC

** Dired

Use the native Emacs Lisp ~ls~ program emulation:

#+BEGIN_SRC emacs-lisp
(require 'ls-lisp)

(custom-set-variables
 '(ls-lisp-use-insert-directory-program nil))
#+END_SRC

Group directories first and tune the displayed information:

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(ls-lisp-dirs-first t)
 '(ls-lisp-use-localized-time-format t)
 '(ls-lisp-verbosity '(uid gid)))
#+END_SRC

** Easy customization interface

Avoid that Emacs messes up the configuration files:

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(custom-file "/dev/null"))
#+END_SRC

This basically inhibit the "Save for Future Sessions" feature; saving the above file and manually loading it will not work either.

** ERC

Disable hard fill:

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(erc-modules '(completion
                 autojoin
                 button
                 irccontrols
                 list
                 match
                 menu
                 move-to-prompt
                 netsplit
                 networks
                 noncommands
                 readonly
                 ring
                 stamp
                 track)))
#+END_SRC

Enable visual indentation instead:

#+BEGIN_SRC emacs-lisp
(add-hook 'erc-mode-hook 'visual-line-mode)
#+END_SRC

Make track mode less noisy:

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(erc-track-exclude-types '("JOIN" "KICK" "NICK" "PART" "QUIT" "MODE")))
#+END_SRC

Set the timestamp on the left and always visible:

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(erc-insert-timestamp-function 'erc-insert-timestamp-left)
 '(erc-timestamp-format "[%H:%M] ")
 '(erc-timestamp-only-if-changed-flag nil))
#+END_SRC

Disable automatic point recentering so that the prompt stays still (see ~C-h v scroll-conservatively~ for the magic number):

#+BEGIN_SRC emacs-lisp
(add-hook 'erc-mode-hook
          (lambda ()
            (set (make-local-variable 'scroll-conservatively) 101)))
#+END_SRC

Automatic [[https://freenode.net/][Freenode]] connection:

#+BEGIN_SRC emacs-lisp
(defun my/irc ()
  (interactive)
  (let* ((credentials (split-string (password-store-get "Freenode")))
         (nick (nth 0 credentials))
         (password (nth 1 credentials)))
    (erc
     :server "irc.freenode.net"
     :port 6667
     :nick nick
     :password password)))
#+END_SRC

Credentials are fetched from [[https://www.passwordstore.org/][pass]] (a graphical pinentry for GPG must be available, e.g., ~pinentry-qt~ and ~pinentry-mac~).

Setup the autojoin list:

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(erc-autojoin-channels-alist '(("freenode.net$" . ("#emacs")))))
#+END_SRC

Add convenience shortcut:

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c i") 'my/irc)
#+END_SRC

** Eshell

Nicer prompt for Eshell:

#+BEGIN_SRC emacs-lisp
(defun my/eshell-prompt-function ()
  (format "%s\n%s "
          (abbreviate-file-name (eshell/pwd))
          (if (= (user-uid) 0) "#" "$")))

(custom-set-variables
 '(eshell-banner-message "")
 '(eshell-prompt-regexp "^[$#] ")
 '(eshell-prompt-function 'my/eshell-prompt-function))
#+END_SRC

Add convenience shortcut:

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c e") 'eshell)
#+END_SRC

** Grep

Ignore Node.js folder in searches:

#+BEGIN_SRC emacs-lisp
(eval-after-load "grep"
  '(add-to-list 'grep-find-ignored-directories "node_modules"))
#+END_SRC

Use a cleaner ~rgrep~ output by hiding the command:

#+BEGIN_SRC emacs-lisp
(defun my/rgrep-fix (&rest ignore)
  (save-excursion
    (with-current-buffer grep-last-buffer
      (goto-line 5) ; manually checked
      (narrow-to-region (point) (point-max)))))

(advice-add 'rgrep :after 'my/rgrep-fix)
#+END_SRC

Add convenience shortcut:

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c g") 'rgrep)
#+END_SRC

** HTML

Associate ~web-mode~:

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
#+END_SRC

** IBuffer

Do not annoy with trivial confirmations:

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(ibuffer-expert t))
#+END_SRC

Use ~ibuffer~ instead of ~list-buffer~:

#+BEGIN_SRC emacs-lisp
(defalias 'list-buffers 'ibuffer)
#+END_SRC

** Ispell

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(ispell-silently-savep t))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(add-to-list 'safe-local-eval-forms
             '(setq ispell-personal-dictionary
                    (concat default-directory ".dictionary")))
#+END_SRC

The above allows to safely set a per-directory personal dictionary (~.dir-locals.el~), for example:

#+BEGIN_SRC emacs-lisp :tangle no
((nil . ((ispell-local-dictionary . "english")
         (eval . (setq ispell-personal-dictionary
                       (concat default-directory ".dictionary"))))))
#+END_SRC

** JavaScript

Associate ~js2-mode~:

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
(add-to-list 'interpreter-mode-alist '("node" . js2-mode))
#+END_SRC

** Magit

Use magit for external ~git commit~ and enable spell checking:

#+BEGIN_SRC emacs-lisp
(global-git-commit-mode)
(add-hook 'git-commit-setup-hook 'git-commit-turn-on-flyspell)
#+END_SRC

Add convenience shortcut:

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c s") 'magit-status)
#+END_SRC

** Org-mode

Ensure spacing coherence and fix indentation:

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(org-src-preserve-indentation t)
 '(org-src-tab-acts-natively t)
 '(org-startup-folded nil)
 '(org-cycle-separator-lines 1)
 '(org-blank-before-new-entry '((heading . t) (plain-list-item))))
#+END_SRC

Use visual indentation by default:

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'visual-line-mode)
#+END_SRC

** Python

Force Python 3 sessions:

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(python-shell-interpreter "python3"))
#+END_SRC

** save-place

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(save-place-mode t))
#+END_SRC

** Shell

Avoid showing the shell buffer output immediately for async commands and allow more than one of them:

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(async-shell-command-buffer 'new-buffer)
 '(async-shell-command-display-buffer nil))
#+END_SRC

** Term

Shell terminal helper:

#+BEGIN_SRC emacs-lisp
(defun my/shell-terminal ()
  "Run a shell terminal without prompt."
  (interactive)
  (term (getenv "SHELL")))
#+END_SRC

Add convenience shortcut:

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c t") 'my/shell-terminal)
#+END_SRC

** window-numbering

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(window-numbering-mode t))
#+END_SRC

** Winner

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(winner-mode t))
#+END_SRC

Replace convenience shortcuts:

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c w u") 'winner-undo)
(global-set-key (kbd "C-c w r") 'winner-redo)
#+END_SRC

** WoMan

Fill the whole frame on creation or refresh with ~R~.

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(woman-fill-frame t))
#+END_SRC

** Zoom

Use a local copy since it is still in active development:

#+BEGIN_SRC emacs-lisp
(require 'zoom "~/dev/zoom/zoom.el")
#+END_SRC

Use a bigger target size and resize temp buffers anyway:

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 '(zoom-mode t)
 '(zoom-size '(90 . 30))
 '(temp-buffer-resize-mode t))
#+END_SRC

* Overrides

** Automatic whitespace management

Define a local minor mode that deletes trailing whitespaces on save if enabled:

#+BEGIN_SRC emacs-lisp
(defun my/trim-whitespace--handler ()
  "Delete trailing whitespaces if `my/trim-whitespace-mode' is enabled."
  (when my/trim-whitespace-mode
    (delete-trailing-whitespace)))

(define-minor-mode my/trim-whitespace-mode
  "Delete trailing whitespaces on save."
  :init-value t
  :lighter " W"
  (my/trim-whitespace--handler))

(add-hook 'before-save-hook 'my/trim-whitespace--handler)
#+END_SRC

Add convenience shortcut:

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c d") 'my/trim-whitespace-mode)
#+END_SRC

** Custom paragraph motions

The default key bindings with an Italian keyboard are crazy, plus due to ghosting not every keyboard is able to process such sequences:

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-p") 'backward-paragraph)
(global-set-key (kbd "M-n") 'forward-paragraph)
#+END_SRC

** Disable /bad/ keys

This minor mode is a best-effort attempt to force the user to avoid keys located outside the main keyboard block.

#+BEGIN_SRC emacs-lisp
(define-minor-mode my/disable-bad-keys-mode
  "Disable bad keys."
  :init-value t
  :keymap (let ((map (make-sparse-keymap)))
            (dolist (key '("<deletechar>"
                           "<home>" "<end>" "<prior>" "<next>"
                           "<up>" "<down>" "<left>" "<right>"))
              (dolist (mod '("" "C-" "M-" "C-M-"))
                (let ((keystroke (kbd (concat mod key))))
                  (define-key map keystroke 'ignore))))
            map))
#+END_SRC

Add convenience shortcut:

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c b") 'my/disable-bad-keys-mode)
#+END_SRC

** Easy ~revert-buffer~

Revert the current buffer without confirmation:

#+BEGIN_SRC emacs-lisp
(defun my/force-revert-buffer ()
  "Revert buffer without confirmation."
  (interactive)
  (revert-buffer t t))
#+END_SRC

Add convenience shortcut:

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-c R") 'my/force-revert-buffer)
#+END_SRC

** Platform-specific setup/fixes

*** macOS fixes

#+BEGIN_SRC emacs-lisp
(when (eq system-type 'darwin)
#+END_SRC

Use the correct ~$PATH~ environment variable:

#+BEGIN_SRC emacs-lisp
  (exec-path-from-shell-initialize)
#+END_SRC

Use the right meta key natively so to allow typing fancy glyphs:

#+BEGIN_SRC emacs-lisp
  (custom-set-variables
   '(mac-right-option-modifier 'none))
#+END_SRC

Use a bigger font size to compensate the retina screen:

#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   '(default ((t (:height 150))))))
#+END_SRC

*** Terminal

Use custom window separator character in terminal mode:

#+BEGIN_SRC emacs-lisp
(set-display-table-slot standard-display-table 'vertical-border #x2502)
#+END_SRC

*** GUI

Avoid suspend-frame in GUI mode:

#+BEGIN_SRC emacs-lisp
(advice-add 'iconify-or-deiconify-frame :before-until 'display-graphic-p)
#+END_SRC

*Note:* the check must be performed /live/ because it should work even if the Emacs server is used.
